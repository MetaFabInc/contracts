// SPDX-License-Identifier: Commons-Clause-1.0
//  __  __     _        ___     _
// |  \/  |___| |_ __ _| __|_ _| |__
// | |\/| / -_)  _/ _` | _/ _` | '_ \
// |_|  |_\___|\__\__,_|_|\__,_|_.__/
//
// Launch your crypto game or gamefi project's blockchain
// infrastructure & game APIs fast with https://trymetafab.com

pragma solidity ^0.8.16;

import "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";

interface IERC1155_Game_Items_Collection is IERC1155  {
  // autogenerated getters
  function itemIds(uint256 index) external view returns (uint256);
  function itemSupplies(uint256 itemId) external view returns (uint256);
  function itemTransferTimelocks(uint256 itemId) external view returns(uint256);

  // functions
  function setItemURI(uint256 _itemId, string memory _uri) external;
  function bulkSetItemURIs(uint256[] calldata _itemIds, string[] memory _uris) external;
  function itemExists(uint256 _itemId) external view returns (bool);
  function isItemTransferrable(uint256 _itemId) external view returns (bool);
  function setItemTransferTimelock(uint256 _itemId, uint256 _unlockTimestamp) external;
  function mintToAddress(address _toAddress, uint256 _itemId, uint256 _quantity) external;
  function mintBatchToAddress(address _toAddress, uint256[] calldata _itemIds, uint256[] calldata _quantities) external;
  function burnFromAddress(address _fromAddress, uint256 _itemId, uint256 _quantity) external;
  function burnBatchFromAddress(address _fromAddress, uint256[] calldata _itemIds, uint256[] calldata _quantities) external;
  function bulkSafeTransferFrom(address _from, address[] calldata _toAddresses, uint256 _itemId, uint256 _quantityPerAddress) external;
  function bulkSafeBatchTransferFrom(address _from, address[] calldata _toAddresses, uint256[] calldata _itemIds, uint256[] calldata _quantitiesPerAddress) external;
  function balanceOfAll(address _address) external view returns(uint256[][] memory);
  function totalItemIds() external view returns (uint256);
  function allItemIds() external view returns (uint256[] memory);
  function allItemSupplies() external view returns (uint256[] memory);
  function allItemURIs() external view returns (string[] memory);
  function paginateItemIds(uint256 itemIdsStartIndexInclusive, uint256 limit) external view returns (uint256[] memory);
  function paginateItemSupplies(uint256 itemIdsStartIndexInclusive, uint256 limit) external view returns (uint256[] memory);
  function paginateItemURIs(uint256 itemIdsStartIndexInclusive, uint256 limit) external view returns (string[] memory);
}
